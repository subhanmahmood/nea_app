(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['exports', 'react', './styles'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require('react'), require('./styles'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.react, global.styles);
    global.index = mod.exports;
  }
})(this, function (exports, _react, _styles) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _interopRequireDefault(_react);

  var _styles2 = _interopRequireDefault(_styles);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var Typeahead = function (_React$Component) {
    _inherits(Typeahead, _React$Component);

    function Typeahead() {
      _classCallCheck(this, Typeahead);

      var _this = _possibleConstructorReturn(this, (Typeahead.__proto__ || Object.getPrototypeOf(Typeahead)).call(this));

      _this.state = {
        data: [],
        inputData: [],
        activeInputItem: 0
      };
      return _this;
    }

    _createClass(Typeahead, [{
      key: 'componentDidMount',
      value: function componentDidMount() {
        var data = this.props.data;
        this.setState({ data: data });
      }
    }, {
      key: 'updateInputValues',
      value: function updateInputValues(value) {
        var updatedInputValues = Object.assign([], this.state.inputData);
        updatedInputValues = value;
        this.setState({ inputData: updatedInputValues });
      }
    }, {
      key: 'sortHandler',
      value: function sortHandler(data) {
        for (var j = 0; j < data.length + 1; j++) {

          for (var i = 1; i < data.length; i++) {

            var currentItem = data[i - 1];
            var nextItem = data[i];

            if (currentItem.toLowerCase() > nextItem.toLowerCase()) {
              data[i - 1] = nextItem;
              data[i] = currentItem;
              console.log("swap");
            }
          }
        }
        return data;
      }
    }, {
      key: 'handler',
      value: function handler(event) {
        var value = event.target.value;
        var userLength = value.length;
        var inputValues = [];
        if (value !== '') {
          this.state.data.forEach(function (item) {
            var substring = item.substring(0, userLength);
            if (value.toLowerCase() == substring.toLowerCase()) {
              inputValues.push(item);
            }
          });
          inputValues = this.sortHandler(inputValues);
          this.updateInputValues(inputValues);
        } else if (value === '') {
          this.updateInputValues([]);
        }
      }
    }, {
      key: 'onBlur',
      value: function onBlur() {
        this.setState({ inputData: [], activeInputItem: 0 });
      }
    }, {
      key: 'keyPress',
      value: function keyPress(event) {
        var key = event.which;
        var listLength = this.state.inputData.length;
        switch (key) {
          case 13:

            var activeValue = document.getElementById('active-suggestion').innerHTML;
            console.log(activeValue);
            document.getElementById(this.props.id).value = activeValue;
            this.setState({ inputData: [], activeInputItem: 0 });
            break;

          case 38:
            // Key up.
            if (this.state.activeInputItem - 1 < 0) {} else {
              var value = this.state.activeInputItem - 1;
              this.setState({ activeInputItem: value });
            }
            break;
          case 40:
            // Key down.
            if (this.state.activeInputItem + 1 > listLength - 1) {} else {
              var activeInputItem = this.state.activeInputItem + 1;
              this.setState({ activeInputItem: activeInputItem });
            }
            break;
        }
      }
    }, {
      key: 'render',
      value: function render() {
        var _this2 = this;

        var inputItems = this.state.inputData.map(function (item, i) {
          var activeInputItem = _this2.state.activeInputItem;
          if (activeInputItem == i) {
            return _react2.default.createElement(
              'li',
              { id: 'active-suggestion', key: i, style: _styles2.default.listItem, className: 'bg-primary text-light' },
              item
            );
          } else {
            return _react2.default.createElement(
              'li',
              { key: i, style: _styles2.default.listItem },
              item
            );
          }
        });
        return _react2.default.createElement(
          'div',
          { style: _styles2.default.container },
          _react2.default.createElement('input', { type: 'text', style: _styles2.default.input, id: this.props.id, className: 'form-control', placeholder: this.props.placeholder, onChange: this.handler.bind(this), onKeyDown: this.keyPress.bind(this), onBlur: this.onBlur.bind(this) }),
          _react2.default.createElement(
            'div',
            { style: _styles2.default.dropdownContainer },
            _react2.default.createElement(
              'ul',
              { style: _styles2.default.listContainer },
              inputItems
            )
          )
        );
      }
    }]);

    return Typeahead;
  }(_react2.default.Component);

  exports.default = Typeahead;
});