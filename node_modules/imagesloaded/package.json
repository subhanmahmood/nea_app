{
  "_args": [
    [
      {
        "raw": "imagesloaded@^4.0.0",
        "scope": null,
        "escapedName": "imagesloaded",
        "name": "imagesloaded",
        "rawSpec": "^4.0.0",
        "spec": ">=4.0.0 <5.0.0",
        "type": "range"
      },
      "D:\\College\\Computer Science\\Coursework\\ta-home-improvements\\node_modules\\react-masonry-component"
    ]
  ],
  "_from": "imagesloaded@>=4.0.0 <5.0.0",
  "_id": "imagesloaded@4.1.4",
  "_inCache": true,
  "_location": "/imagesloaded",
  "_nodeVersion": "6.9.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/imagesloaded-4.1.4.tgz_1514912162072_0.134036460891366"
  },
  "_npmUser": {
    "name": "desandro",
    "email": "desandrocodes@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "imagesloaded@^4.0.0",
    "scope": null,
    "escapedName": "imagesloaded",
    "name": "imagesloaded",
    "rawSpec": "^4.0.0",
    "spec": ">=4.0.0 <5.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/react-masonry-component"
  ],
  "_resolved": "https://registry.npmjs.org/imagesloaded/-/imagesloaded-4.1.4.tgz",
  "_shasum": "1376efcd162bb768c34c3727ac89cc04051f3cc7",
  "_shrinkwrap": null,
  "_spec": "imagesloaded@^4.0.0",
  "_where": "D:\\College\\Computer Science\\Coursework\\ta-home-improvements\\node_modules\\react-masonry-component",
  "author": {
    "name": "David DeSandro"
  },
  "bugs": {
    "url": "https://github.com/desandro/imagesloaded/issues"
  },
  "dependencies": {
    "ev-emitter": "^1.0.0"
  },
  "description": "JavaScript is all like _You images done yet or what?_",
  "devDependencies": {
    "chalk": "^1.1.1",
    "cheerio": "^0.19.0",
    "gulp": "^3.9.0",
    "gulp-jshint": "^1.11.2",
    "gulp-json-lint": "^0.1.0",
    "gulp-rename": "^1.2.2",
    "gulp-replace": "^0.5.4",
    "gulp-requirejs-optimize": "github:metafizzy/gulp-requirejs-optimize",
    "gulp-uglify": "^1.4.2",
    "gulp-util": "^3.0.7",
    "highlight.js": "^8.9.1",
    "marked": "^0.3.5",
    "minimist": "^1.2.0",
    "transfob": "^1.0.0"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "integrity": "sha512-ltiBVcYpc/TYTF5nolkMNsnREHW+ICvfQ3Yla2Sgr71YFwQ86bDwV9hgpFhFtrGPuwEx5+LqOHIrdXBdoWwwsA==",
    "shasum": "1376efcd162bb768c34c3727ac89cc04051f3cc7",
    "tarball": "https://registry.npmjs.org/imagesloaded/-/imagesloaded-4.1.4.tgz"
  },
  "gitHead": "67c4e57453120935180c45c6820e7d3fbd2ea1f9",
  "homepage": "https://github.com/desandro/imagesloaded",
  "keywords": [
    "images",
    "loaded",
    "ui",
    "dom",
    "jquery-plugin"
  ],
  "license": "MIT",
  "main": "imagesloaded.js",
  "maintainers": [
    {
      "name": "desandro",
      "email": "desandrocodes@gmail.com"
    }
  ],
  "name": "imagesloaded",
  "optionalDependencies": {},
  "readme": "# imagesLoaded\n\n<p class=\"tagline\">JavaScript is all like \"You images done yet or what?\"</p>\n\n[imagesloaded.desandro.com](http://imagesloaded.desandro.com)\n\nDetect when images have been loaded.\n\n## Install\n\n### Download\n\n+ [imagesloaded.pkgd.min.js](https://unpkg.com/imagesloaded@4/imagesloaded.pkgd.min.js) minified\n+ [imagesloaded.pkgd.js](https://unpkg.com/imagesloaded@4/imagesloaded.pkgd.js) un-minified\n\n### CDN\n\n``` html\n<script src=\"https://unpkg.com/imagesloaded@4/imagesloaded.pkgd.min.js\"></script>\n<!-- or -->\n<script src=\"https://unpkg.com/imagesloaded@4/imagesloaded.pkgd.js\"></script>\n```\n\n### Package managers\n\nInstall via [npm](https://www.npmjs.com/package/imagesloaded): `npm install imagesloaded`\n\nInstall via [Bower](http://bower.io): `bower install imagesloaded --save`\n\n## jQuery\n\nYou can use imagesLoaded as a jQuery Plugin.\n\n``` js\n$('#container').imagesLoaded( function() {\n  // images have loaded\n});\n\n// options\n$('#container').imagesLoaded( {\n  // options...\n  },\n  function() {\n    // images have loaded\n  }\n);\n```\n\n`.imagesLoaded()` returns a [jQuery Deferred object](http://api.jquery.com/category/deferred-object/). This allows you to use `.always()`, `.done()`, `.fail()` and `.progress()`.\n\n``` js\n$('#container').imagesLoaded()\n  .always( function( instance ) {\n    console.log('all images loaded');\n  })\n  .done( function( instance ) {\n    console.log('all images successfully loaded');\n  })\n  .fail( function() {\n    console.log('all images loaded, at least one is broken');\n  })\n  .progress( function( instance, image ) {\n    var result = image.isLoaded ? 'loaded' : 'broken';\n    console.log( 'image is ' + result + ' for ' + image.img.src );\n  });\n```\n\n## Vanilla JavaScript\n\nYou can use imagesLoaded with vanilla JS.\n\n``` js\nimagesLoaded( elem, callback )\n// options\nimagesLoaded( elem, options, callback )\n// you can use `new` if you like\nnew imagesLoaded( elem, callback )\n```\n\n+ `elem` _Element, NodeList, Array, or Selector String_\n+ `options` _Object_\n+ `callback` _Function_ - function triggered after all images have been loaded\n\nUsing a callback function is the same as binding it to the `always` event (see below).\n\n``` js\n// element\nimagesLoaded( document.querySelector('#container'), function( instance ) {\n  console.log('all images are loaded');\n});\n// selector string\nimagesLoaded( '#container', function() {...});\n// multiple elements\nvar posts = document.querySelectorAll('.post');\nimagesLoaded( posts, function() {...});\n```\n\nBind events with vanilla JS with .on(), .off(), and .once() methods.\n\n``` js\nvar imgLoad = imagesLoaded( elem );\nfunction onAlways( instance ) {\n  console.log('all images are loaded');\n}\n// bind with .on()\nimgLoad.on( 'always', onAlways );\n// unbind with .off()\nimgLoad.off( 'always', onAlways );\n```\n\n## Background\n\nDetect when background images have loaded, in addition to `<img>`s.\n\nSet `{ background: true }` to detect when the element's background image has loaded.\n\n``` js\n// jQuery\n$('#container').imagesLoaded( { background: true }, function() {\n  console.log('#container background image loaded');\n});\n\n// vanilla JS\nimagesLoaded( '#container', { background: true }, function() {\n  console.log('#container background image loaded');\n});\n```\n\n[See jQuery demo](http://codepen.io/desandro/pen/pjVMPB) or [vanilla JS demo](http://codepen.io/desandro/pen/avKooW) on CodePen.\n\nSet to a selector string like `{ background: '.item' }` to detect when the background images of child elements have loaded.\n\n``` js\n// jQuery\n$('#container').imagesLoaded( { background: '.item' }, function() {\n  console.log('all .item background images loaded');\n});\n\n// vanilla JS\nimagesLoaded( '#container', { background: '.item' }, function() {\n  console.log('all .item background images loaded');\n});\n```\n\n[See jQuery demo](http://codepen.io/desandro/pen/avKoZL) or [vanilla JS demo](http://codepen.io/desandro/pen/vNrBGz) on CodePen.\n\n## Events\n\n### always\n\n``` js\n// jQuery\n$('#container').imagesLoaded().always( function( instance ) {\n  console.log('ALWAYS - all images have been loaded');\n});\n\n// vanilla JS\nimgLoad.on( 'always', function( instance ) {\n  console.log('ALWAYS - all images have been loaded');\n});\n```\n\nTriggered after all images have been either loaded or confirmed broken.\n\n+ `instance` _imagesLoaded_ - the imagesLoaded instance\n\n### done\n\n``` js\n// jQuery\n$('#container').imagesLoaded().done( function( instance ) {\n  console.log('DONE  - all images have been successfully loaded');\n});\n\n// vanilla JS\nimgLoad.on( 'done', function( instance ) {\n  console.log('DONE  - all images have been successfully loaded');\n});\n```\n\nTriggered after all images have successfully loaded without any broken images.\n\n### fail\n\n``` js\n$('#container').imagesLoaded().fail( function( instance ) {\n  console.log('FAIL - all images loaded, at least one is broken');\n});\n\n// vanilla JS\nimgLoad.on( 'fail', function( instance ) {\n  console.log('FAIL - all images loaded, at least one is broken');\n});\n```\n\nTriggered after all images have been loaded with at least one broken image.\n\n### progress\n\n``` js\nimgLoad.on( 'progress', function( instance, image ) {\n  var result = image.isLoaded ? 'loaded' : 'broken';\n  console.log( 'image is ' + result + ' for ' + image.img.src );\n});\n```\n\nTriggered after each image has been loaded.\n\n+ `instance` _imagesLoaded_ - the imagesLoaded instance\n+ `image` _LoadingImage_ - the LoadingImage instance of the loaded image\n\n<!-- sponsored -->\n\n## Properties\n\n### LoadingImage.img\n\n_Image_ - The `img` element\n\n### LoadingImage.isLoaded\n\n_Boolean_ - `true` when the image has successfully loaded\n\n### imagesLoaded.images\n\nArray of _LoadingImage_ instances for each image detected\n\n``` js\nvar imgLoad = imagesLoaded('#container');\nimgLoad.on( 'always', function() {\n  console.log( imgLoad.images.length + ' images loaded' );\n  // detect which image is broken\n  for ( var i = 0, len = imgLoad.images.length; i < len; i++ ) {\n    var image = imgLoad.images[i];\n    var result = image.isLoaded ? 'loaded' : 'broken';\n    console.log( 'image is ' + result + ' for ' + image.img.src );\n  }\n});\n```\n\n## Browserify\n\nimagesLoaded works with [Browserify](http://browserify.org/).\n\n``` bash\nnpm install imagesloaded --save\n```\n\n``` js\nvar imagesLoaded = require('imagesloaded');\n\nimagesLoaded( elem, function() {...} );\n```\n\nUse `.makeJQueryPlugin` to make to use `.imagesLoaded()` jQuery plugin.\n\n``` js\nvar $ = require('jquery');\nvar imagesLoaded = require('imagesloaded');\n\n// provide jQuery argument\nimagesLoaded.makeJQueryPlugin( $ );\n// now use .imagesLoaded() jQuery plugin\n$('#container').imagesLoaded( function() {...});\n```\n\n## Webpack\n\nInstall imagesLoaded with npm.\n\n``` bash\nnpm install imagesloaded\n```\n\nYou can then `require('imagesloaded')`.\n\n``` js\n// main.js\nvar imagesLoaded = require('imagesloaded');\n\nimagesLoaded( '#container', function() {\n  // images have loaded\n});\n```\n\nUse `.makeJQueryPlugin` to make `.imagesLoaded()` jQuery plugin.\n\n``` js\n// main.js\nvar imagesLoaded = require('imagesloaded');\nvar $ = require('jquery');\n\n// provide jQuery argument\nimagesLoaded.makeJQueryPlugin( $ );\n// now use .imagesLoaded() jQuery plugin\n$('#container').imagesLoaded( function() {...});\n```\n\nRun webpack.\n\n``` bash\nwebpack main.js bundle.js\n```\n\n## RequireJS\n\nimagesLoaded works with [RequireJS](http://requirejs.org).\n\nYou can require [imagesloaded.pkgd.js](http://imagesloaded.desandro.com/imagesloaded.pkgd.js).\n\n``` js\nrequirejs( [\n  'path/to/imagesloaded.pkgd.js',\n], function( imagesLoaded ) {\n  imagesLoaded( '#container', function() { ... });\n});\n```\n\nUse `.makeJQueryPlugin` to make `.imagesLoaded()` jQuery plugin.\n\n``` js\nrequirejs( [\n  'jquery',\n  'path/to/imagesloaded.pkgd.js',\n], function( $, imagesLoaded ) {\n  // provide jQuery argument\n  imagesLoaded.makeJQueryPlugin( $ );\n  // now use .imagesLoaded() jQuery plugin\n  $('#container').imagesLoaded( function() {...});\n});\n```\n\nYou can manage dependencies with [Bower](http://bower.io). Set `baseUrl` to `bower_components` and set a path config for all your application code.\n\n``` js\nrequirejs.config({\n  baseUrl: 'bower_components/',\n  paths: { // path to your app\n    app: '../'\n  }\n});\n\nrequirejs( [\n  'imagesloaded/imagesloaded',\n  'app/my-component.js'\n], function( imagesLoaded, myComp ) {\n  imagesLoaded( '#container', function() { ... });\n});\n```\n\n## Browser support\n\n+ IE9+\n+ Android 2.3+\n+ iOS Safari 4+\n+ All other modern browsers\n\nUse [imagesLoaded v3](http://imagesloaded.desandro.com/v3/) for IE8 support.\n\n## MIT License\n\nimagesLoaded is released under the [MIT License](http://desandro.mit-license.org/). Have at it.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/desandro/imagesloaded.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "4.1.4"
}
